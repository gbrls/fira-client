// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace fira_message {
namespace sim_to_ref {
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
namespace google {
namespace protobuf {
template<> ::fira_message::sim_to_ref::Ball* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Ball>(Arena*);
template<> ::fira_message::sim_to_ref::Command* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Command>(Arena*);
template<> ::fira_message::sim_to_ref::Commands* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(Arena*);
template<> ::fira_message::sim_to_ref::Environment* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Environment>(Arena*);
template<> ::fira_message::sim_to_ref::Field* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Field>(Arena*);
template<> ::fira_message::sim_to_ref::Frame* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Frame>(Arena*);
template<> ::fira_message::sim_to_ref::Packet* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Packet>(Arena*);
template<> ::fira_message::sim_to_ref::Robot* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Robot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

class Ball : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Ball) */ {
 public:
  Ball();
  virtual ~Ball();

  Ball(const Ball& from);

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ball* other);
  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(NULL);
  }

  Ball* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double vx = 4;
  void clear_vx();
  static const int kVxFieldNumber = 4;
  double vx() const;
  void set_vx(double value);

  // double vy = 5;
  void clear_vy();
  static const int kVyFieldNumber = 5;
  double vy() const;
  void set_vy(double value);

  // double vz = 6;
  void clear_vz();
  static const int kVzFieldNumber = 6;
  double vz() const;
  void set_vz(double value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Ball)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double vx_;
  double vy_;
  double vz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // double orientation = 4;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  double orientation() const;
  void set_orientation(double value);

  // double vx = 5;
  void clear_vx();
  static const int kVxFieldNumber = 5;
  double vx() const;
  void set_vx(double value);

  // double vy = 6;
  void clear_vy();
  static const int kVyFieldNumber = 6;
  double vy() const;
  void set_vy(double value);

  // double vorientation = 7;
  void clear_vorientation();
  static const int kVorientationFieldNumber = 7;
  double vorientation() const;
  void set_vorientation(double value);

  // uint32 robot_id = 1;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  ::google::protobuf::uint32 robot_id() const;
  void set_robot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Robot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double orientation_;
  double vx_;
  double vy_;
  double vorientation_;
  ::google::protobuf::uint32 robot_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Field* other);
  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(NULL);
  }

  Field* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  double width() const;
  void set_width(double value);

  // double length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // double goal_width = 3;
  void clear_goal_width();
  static const int kGoalWidthFieldNumber = 3;
  double goal_width() const;
  void set_goal_width(double value);

  // double goal_depth = 4;
  void clear_goal_depth();
  static const int kGoalDepthFieldNumber = 4;
  double goal_depth() const;
  void set_goal_depth(double value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double width_;
  double length_;
  double goal_width_;
  double goal_depth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
  int robots_yellow_size() const;
  void clear_robots_yellow();
  static const int kRobotsYellowFieldNumber = 2;
  ::fira_message::sim_to_ref::Robot* mutable_robots_yellow(int index);
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
      mutable_robots_yellow();
  const ::fira_message::sim_to_ref::Robot& robots_yellow(int index) const;
  ::fira_message::sim_to_ref::Robot* add_robots_yellow();
  const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
      robots_yellow() const;

  // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
  int robots_blue_size() const;
  void clear_robots_blue();
  static const int kRobotsBlueFieldNumber = 3;
  ::fira_message::sim_to_ref::Robot* mutable_robots_blue(int index);
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
      mutable_robots_blue();
  const ::fira_message::sim_to_ref::Robot& robots_blue(int index) const;
  ::fira_message::sim_to_ref::Robot* add_robots_blue();
  const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
      robots_blue() const;

  // .fira_message.sim_to_ref.Ball ball = 1;
  bool has_ball() const;
  void clear_ball();
  static const int kBallFieldNumber = 1;
  private:
  const ::fira_message::sim_to_ref::Ball& _internal_ball() const;
  public:
  const ::fira_message::sim_to_ref::Ball& ball() const;
  ::fira_message::sim_to_ref::Ball* release_ball();
  ::fira_message::sim_to_ref::Ball* mutable_ball();
  void set_allocated_ball(::fira_message::sim_to_ref::Ball* ball);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot > robots_yellow_;
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot > robots_blue_;
  ::fira_message::sim_to_ref::Ball* ball_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool yellowteam = 2;
  void clear_yellowteam();
  static const int kYellowteamFieldNumber = 2;
  bool yellowteam() const;
  void set_yellowteam(bool value);

  // double wheel_left = 6;
  void clear_wheel_left();
  static const int kWheelLeftFieldNumber = 6;
  double wheel_left() const;
  void set_wheel_left(double value);

  // double wheel_right = 7;
  void clear_wheel_right();
  static const int kWheelRightFieldNumber = 7;
  double wheel_right() const;
  void set_wheel_right(double value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  bool yellowteam_;
  double wheel_left_;
  double wheel_right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Commands : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Commands* other);
  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(NULL);
  }

  Commands* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
  int robot_commands_size() const;
  void clear_robot_commands();
  static const int kRobotCommandsFieldNumber = 1;
  ::fira_message::sim_to_ref::Command* mutable_robot_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >*
      mutable_robot_commands();
  const ::fira_message::sim_to_ref::Command& robot_commands(int index) const;
  ::fira_message::sim_to_ref::Command* add_robot_commands();
  const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >&
      robot_commands() const;

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Commands)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command > robot_commands_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fira_message.sim_to_ref.Commands cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  private:
  const ::fira_message::sim_to_ref::Commands& _internal_cmd() const;
  public:
  const ::fira_message::sim_to_ref::Commands& cmd() const;
  ::fira_message::sim_to_ref::Commands* release_cmd();
  ::fira_message::sim_to_ref::Commands* mutable_cmd();
  void set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fira_message::sim_to_ref::Commands* cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Environment) */ {
 public:
  Environment();
  virtual ~Environment();

  Environment(const Environment& from);

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Environment* other);
  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(NULL);
  }

  Environment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fira_message.sim_to_ref.Frame frame = 2;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  private:
  const ::fira_message::sim_to_ref::Frame& _internal_frame() const;
  public:
  const ::fira_message::sim_to_ref::Frame& frame() const;
  ::fira_message::sim_to_ref::Frame* release_frame();
  ::fira_message::sim_to_ref::Frame* mutable_frame();
  void set_allocated_frame(::fira_message::sim_to_ref::Frame* frame);

  // .fira_message.sim_to_ref.Field field = 3;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 3;
  private:
  const ::fira_message::sim_to_ref::Field& _internal_field() const;
  public:
  const ::fira_message::sim_to_ref::Field& field() const;
  ::fira_message::sim_to_ref::Field* release_field();
  ::fira_message::sim_to_ref::Field* mutable_field();
  void set_allocated_field(::fira_message::sim_to_ref::Field* field);

  // uint32 step = 1;
  void clear_step();
  static const int kStepFieldNumber = 1;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // uint32 goals_blue = 4;
  void clear_goals_blue();
  static const int kGoalsBlueFieldNumber = 4;
  ::google::protobuf::uint32 goals_blue() const;
  void set_goals_blue(::google::protobuf::uint32 value);

  // uint32 goals_yellow = 5;
  void clear_goals_yellow();
  static const int kGoalsYellowFieldNumber = 5;
  ::google::protobuf::uint32 goals_yellow() const;
  void set_goals_yellow(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Environment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fira_message::sim_to_ref::Frame* frame_;
  ::fira_message::sim_to_ref::Field* field_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::uint32 goals_blue_;
  ::google::protobuf::uint32 goals_yellow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ball

// double x = 1;
inline void Ball::clear_x() {
  x_ = 0;
}
inline double Ball::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.x)
  return x_;
}
inline void Ball::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.x)
}

// double y = 2;
inline void Ball::clear_y() {
  y_ = 0;
}
inline double Ball::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.y)
  return y_;
}
inline void Ball::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.y)
}

// double z = 3;
inline void Ball::clear_z() {
  z_ = 0;
}
inline double Ball::z() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.z)
  return z_;
}
inline void Ball::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.z)
}

// double vx = 4;
inline void Ball::clear_vx() {
  vx_ = 0;
}
inline double Ball::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vx)
  return vx_;
}
inline void Ball::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vx)
}

// double vy = 5;
inline void Ball::clear_vy() {
  vy_ = 0;
}
inline double Ball::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vy)
  return vy_;
}
inline void Ball::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vy)
}

// double vz = 6;
inline void Ball::clear_vz() {
  vz_ = 0;
}
inline double Ball::vz() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vz)
  return vz_;
}
inline void Ball::set_vz(double value) {
  
  vz_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vz)
}

// -------------------------------------------------------------------

// Robot

// uint32 robot_id = 1;
inline void Robot::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::google::protobuf::uint32 Robot::robot_id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.robot_id)
  return robot_id_;
}
inline void Robot::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.robot_id)
}

// double x = 2;
inline void Robot::clear_x() {
  x_ = 0;
}
inline double Robot::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.x)
  return x_;
}
inline void Robot::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.x)
}

// double y = 3;
inline void Robot::clear_y() {
  y_ = 0;
}
inline double Robot::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.y)
  return y_;
}
inline void Robot::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.y)
}

// double orientation = 4;
inline void Robot::clear_orientation() {
  orientation_ = 0;
}
inline double Robot::orientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.orientation)
  return orientation_;
}
inline void Robot::set_orientation(double value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.orientation)
}

// double vx = 5;
inline void Robot::clear_vx() {
  vx_ = 0;
}
inline double Robot::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vx)
  return vx_;
}
inline void Robot::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vx)
}

// double vy = 6;
inline void Robot::clear_vy() {
  vy_ = 0;
}
inline double Robot::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vy)
  return vy_;
}
inline void Robot::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vy)
}

// double vorientation = 7;
inline void Robot::clear_vorientation() {
  vorientation_ = 0;
}
inline double Robot::vorientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vorientation)
  return vorientation_;
}
inline void Robot::set_vorientation(double value) {
  
  vorientation_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vorientation)
}

// -------------------------------------------------------------------

// Field

// double width = 1;
inline void Field::clear_width() {
  width_ = 0;
}
inline double Field::width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.width)
  return width_;
}
inline void Field::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.width)
}

// double length = 2;
inline void Field::clear_length() {
  length_ = 0;
}
inline double Field::length() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.length)
  return length_;
}
inline void Field::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.length)
}

// double goal_width = 3;
inline void Field::clear_goal_width() {
  goal_width_ = 0;
}
inline double Field::goal_width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_width)
  return goal_width_;
}
inline void Field::set_goal_width(double value) {
  
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_width)
}

// double goal_depth = 4;
inline void Field::clear_goal_depth() {
  goal_depth_ = 0;
}
inline double Field::goal_depth() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_depth)
  return goal_depth_;
}
inline void Field::set_goal_depth(double value) {
  
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_depth)
}

// -------------------------------------------------------------------

// Frame

// .fira_message.sim_to_ref.Ball ball = 1;
inline bool Frame::has_ball() const {
  return this != internal_default_instance() && ball_ != NULL;
}
inline void Frame::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) {
    delete ball_;
  }
  ball_ = NULL;
}
inline const ::fira_message::sim_to_ref::Ball& Frame::_internal_ball() const {
  return *ball_;
}
inline const ::fira_message::sim_to_ref::Ball& Frame::ball() const {
  const ::fira_message::sim_to_ref::Ball* p = ball_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.ball)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Ball*>(
      &::fira_message::sim_to_ref::_Ball_default_instance_);
}
inline ::fira_message::sim_to_ref::Ball* Frame::release_ball() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Frame.ball)
  
  ::fira_message::sim_to_ref::Ball* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Ball* Frame::mutable_ball() {
  
  if (ball_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Ball>(GetArenaNoVirtual());
    ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.ball)
  return ball_;
}
inline void Frame::set_allocated_ball(::fira_message::sim_to_ref::Ball* ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ball_;
  }
  if (ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Frame.ball)
}

// repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
inline int Frame::robots_yellow_size() const {
  return robots_yellow_.size();
}
inline void Frame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::fira_message::sim_to_ref::Robot* Frame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return &robots_yellow_;
}
inline const ::fira_message::sim_to_ref::Robot& Frame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Get(index);
}
inline ::fira_message::sim_to_ref::Robot* Frame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_;
}

// repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
inline int Frame::robots_blue_size() const {
  return robots_blue_.size();
}
inline void Frame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::fira_message::sim_to_ref::Robot* Frame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_blue)
  return &robots_blue_;
}
inline const ::fira_message::sim_to_ref::Robot& Frame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Get(index);
}
inline ::fira_message::sim_to_ref::Robot* Frame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_blue() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_;
}

// -------------------------------------------------------------------

// Command

// uint32 id = 1;
inline void Command::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Command::id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.id)
  return id_;
}
inline void Command::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.id)
}

// bool yellowteam = 2;
inline void Command::clear_yellowteam() {
  yellowteam_ = false;
}
inline bool Command::yellowteam() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.yellowteam)
  return yellowteam_;
}
inline void Command::set_yellowteam(bool value) {
  
  yellowteam_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.yellowteam)
}

// double wheel_left = 6;
inline void Command::clear_wheel_left() {
  wheel_left_ = 0;
}
inline double Command::wheel_left() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_left)
  return wheel_left_;
}
inline void Command::set_wheel_left(double value) {
  
  wheel_left_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_left)
}

// double wheel_right = 7;
inline void Command::clear_wheel_right() {
  wheel_right_ = 0;
}
inline double Command::wheel_right() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_right)
  return wheel_right_;
}
inline void Command::set_wheel_right(double value) {
  
  wheel_right_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_right)
}

// -------------------------------------------------------------------

// Commands

// repeated .fira_message.sim_to_ref.Command robot_commands = 1;
inline int Commands::robot_commands_size() const {
  return robot_commands_.size();
}
inline void Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
inline ::fira_message::sim_to_ref::Command* Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >*
Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Commands.robot_commands)
  return &robot_commands_;
}
inline const ::fira_message::sim_to_ref::Command& Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Get(index);
}
inline ::fira_message::sim_to_ref::Command* Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >&
Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_;
}

// -------------------------------------------------------------------

// Packet

// .fira_message.sim_to_ref.Commands cmd = 1;
inline bool Packet::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
inline void Packet::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) {
    delete cmd_;
  }
  cmd_ = NULL;
}
inline const ::fira_message::sim_to_ref::Commands& Packet::_internal_cmd() const {
  return *cmd_;
}
inline const ::fira_message::sim_to_ref::Commands& Packet::cmd() const {
  const ::fira_message::sim_to_ref::Commands* p = cmd_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.cmd)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Commands*>(
      &::fira_message::sim_to_ref::_Commands_default_instance_);
}
inline ::fira_message::sim_to_ref::Commands* Packet::release_cmd() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.cmd)
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::mutable_cmd() {
  
  if (cmd_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(GetArenaNoVirtual());
    cmd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.cmd)
  return cmd_;
}
inline void Packet::set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cmd_;
  }
  if (cmd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cmd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}

// -------------------------------------------------------------------

// Environment

// uint32 step = 1;
inline void Environment::clear_step() {
  step_ = 0u;
}
inline ::google::protobuf::uint32 Environment::step() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.step)
  return step_;
}
inline void Environment::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.step)
}

// .fira_message.sim_to_ref.Frame frame = 2;
inline bool Environment::has_frame() const {
  return this != internal_default_instance() && frame_ != NULL;
}
inline void Environment::clear_frame() {
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) {
    delete frame_;
  }
  frame_ = NULL;
}
inline const ::fira_message::sim_to_ref::Frame& Environment::_internal_frame() const {
  return *frame_;
}
inline const ::fira_message::sim_to_ref::Frame& Environment::frame() const {
  const ::fira_message::sim_to_ref::Frame* p = frame_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Frame*>(
      &::fira_message::sim_to_ref::_Frame_default_instance_);
}
inline ::fira_message::sim_to_ref::Frame* Environment::release_frame() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.frame)
  
  ::fira_message::sim_to_ref::Frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Frame* Environment::mutable_frame() {
  
  if (frame_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Frame>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.frame)
  return frame_;
}
inline void Environment::set_allocated_frame(::fira_message::sim_to_ref::Frame* frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_;
  }
  if (frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.frame)
}

// .fira_message.sim_to_ref.Field field = 3;
inline bool Environment::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void Environment::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}
inline const ::fira_message::sim_to_ref::Field& Environment::_internal_field() const {
  return *field_;
}
inline const ::fira_message::sim_to_ref::Field& Environment::field() const {
  const ::fira_message::sim_to_ref::Field* p = field_;
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.field)
  return p != NULL ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Field*>(
      &::fira_message::sim_to_ref::_Field_default_instance_);
}
inline ::fira_message::sim_to_ref::Field* Environment::release_field() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.field)
  
  ::fira_message::sim_to_ref::Field* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::fira_message::sim_to_ref::Field* Environment::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Field>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.field)
  return field_;
}
inline void Environment::set_allocated_field(::fira_message::sim_to_ref::Field* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete field_;
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.field)
}

// uint32 goals_blue = 4;
inline void Environment::clear_goals_blue() {
  goals_blue_ = 0u;
}
inline ::google::protobuf::uint32 Environment::goals_blue() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_blue)
  return goals_blue_;
}
inline void Environment::set_goals_blue(::google::protobuf::uint32 value) {
  
  goals_blue_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_blue)
}

// uint32 goals_yellow = 5;
inline void Environment::clear_goals_yellow() {
  goals_yellow_ = 0u;
}
inline ::google::protobuf::uint32 Environment::goals_yellow() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_yellow)
  return goals_yellow_;
}
inline void Environment::set_goals_yellow(::google::protobuf::uint32 value) {
  
  goals_yellow_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_yellow)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
